SET foreign_key_checks = 0;


DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Employee;
DROP TABLE IF EXISTS Pharmacist;
DROP TABLE IF EXISTS Nurse;
DROP TABLE IF EXISTS Doctor;
DROP TABLE IF EXISTS Receptionist;
DROP TABLE IF EXISTS Cashier;
DROP TABLE IF EXISTS Administrative;
DROP TABLE IF EXISTS Security;
DROP TABLE IF EXISTS Residence;
DROP TABLE IF EXISTS Facility;
DROP TABLE IF EXISTS Variant;
DROP TABLE IF EXISTS LivesWith;
DROP TABLE IF EXISTS WorksAt;
DROP TABLE IF EXISTS Vaccinated;
DROP TABLE IF EXISTS Infected;




CREATE TABLE Person (
    SIN VARCHAR(20) NOT NULL UNIQUE, # added NOT NULL UNIQUE
    MID VARCHAR(20) NOT NULL UNIQUE, # added NOT NULL UNIQUE
    fname VARCHAR(255),
    lname VARCHAR(255),
    email VARCHAR(255),
    DOB DATE,
    phone_number VARCHAR(20),
    citizenship VARCHAR(50),
    rid INT NOT NULL,
    PRIMARY KEY(SIN, MID),
    FOREIGN KEY (rid) REFERENCES Residence(rid)
);

CREATE TABLE Employee (
  employee_sin VARCHAR(20) PRIMARY KEY,
  FOREIGN KEY (employee_sin) REFERENCES Person(SIN)
);
CREATE TABLE Pharmacist (
  pharmacist_sin VARCHAR(20) PRIMARY KEY,
  FOREIGN KEY (pharmacist_sin) REFERENCES Employee(employee_sin)
);
CREATE TABLE Nurse (
  nurse_sin VARCHAR(20) PRIMARY KEY,
  FOREIGN KEY (nurse_sin) REFERENCES Employee(employee_sin)
);
CREATE TABLE Doctor (
  doctor_sin VARCHAR(20) PRIMARY KEY,
  FOREIGN KEY (doctor_sin) REFERENCES Employee(employee_sin)
);
CREATE TABLE Receptionist(
    receptionist_sin VARCHAR(20) PRIMARY KEY,
    FOREIGN KEY (receptionist_sin) REFERENCES Employee(employee_sin)
);

CREATE TABLE Cashier(
    cashier_sin VARCHAR(20) PRIMARY KEY,
    FOREIGN KEY (cashier_sin) REFERENCES Employee(employee_sin)
);
CREATE TABLE Administrative(
    administrative_sin VARCHAR(20) PRIMARY KEY,
    FOREIGN KEY (administrative_sin) REFERENCES Employee(employee_sin)
);

CREATE TABLE Security(
    security_sin VARCHAR(20) PRIMARY KEY,
    FOREIGN KEY (security_sin) REFERENCES Employee(employee_sin)
);

CREATE TABLE Residence (
  rid INT PRIMARY KEY,
  address VARCHAR(255),
  city VARCHAR(255),
  province VARCHAR(255),
  postal_code VARCHAR(10),
  phone_number VARCHAR(20),
  room_count INT,
  residence_type VARCHAR(50),
  CHECK (residence_type IN ('apartment', 'condominium', 'demidetached','house'))
);

CREATE TABLE Facility (
  fid INT PRIMARY KEY,
  name VARCHAR(255),
  address VARCHAR(255),
  city VARCHAR(255),
  province VARCHAR(255),
  postal_code VARCHAR(10),
  phone_number VARCHAR(20),
  web_address VARCHAR(255),
  facility_type VARCHAR(50),
  manager_sin VARCHAR(20) UNIQUE, # added UNIQUE
  capacity INT,
    CHECK (facility_type IN ('hospital', 'clinic', 'pharmacy','CLSC','special')),
    FOREIGN KEY (manager_sin) REFERENCES Administrative(administrative_sin)
);

CREATE TABLE Variant (
  variantType VARCHAR(50) PRIMARY KEY
);

CREATE TABLE LivesWith (
    employee_sin VARCHAR(20),
    person_sin VARCHAR(20),
    relationship VARCHAR(50) NOT NULL CHECK (relationship IN ('roommate', 'partner', 'parent', 'dependent')), # this allows only specific values for this relationship
    PRIMARY KEY (employee_sin, person_sin),
    FOREIGN KEY (employee_sin) REFERENCES Employee(employee_sin),
    FOREIGN KEY (person_sin) REFERENCES Person(SIN)
);

CREATE TABLE WorksAt (
  employee_sin VARCHAR(20),
  fid INT,
  start_date DATE,
  end_date DATE,
  PRIMARY KEY (employee_sin, fid, start_date),
  FOREIGN KEY (employee_sin) REFERENCES Employee(employee_sin),
  FOREIGN KEY (fid) REFERENCES Facility(fid)
);

DELIMITER //
CREATE TRIGGER CheckOnlyOneFacilityAtATime
BEFORE INSERT ON WorksAt
FOR EACH ROW
BEGIN
    DECLARE count INT;
    SELECT COUNT(*) INTO count
    FROM WorksAt
    WHERE employee_sin = NEW.employee_sin AND end_date IS NULL;
    IF count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Employee already works somewhere, change end date before adding';
    END IF;
END //
DELIMITER ;

CREATE TABLE Vaccinated (
  person_sin VARCHAR(20),
  dose_number INT,
  vaccine_type VARCHAR(255) NOT NULL,
  date DATE NOT NULL,
  fid INT NOT NULL,
  PRIMARY KEY (person_sin, dose_number),
  FOREIGN KEY (person_sin) REFERENCES Person(SIN),
  FOREIGN KEY (fid) REFERENCES Facility(fid),
    CHECK (dose_number > 0)
);




CREATE TABLE Infected (
  person_sin VARCHAR(20),
  variantType VARCHAR(50) NOT NULL,
  date DATE NOT NULL,
  PRIMARY KEY (person_sin, variantType, date), # so that a person can be infected more than once
  FOREIGN KEY (person_sin) REFERENCES Person(SIN),
  FOREIGN KEY (variantType) REFERENCES Variant(variantType)
);

SET foreign_key_checks = 1;
DML Transaction (populating tables)
INSERT INTO Residence (rid, address, city, province, postal_code, phone_number, room_count, residence_type) 
VALUES 
(1, '1005 Saint Catherine', 'Montreal', 'Quebec', 'H9X3B7', '111-111-1111', 3, 'house'), # Spongebob Squarepants
(2, '200 Pine Avenue', 'Vancouver', 'British Columbia', 'V6B3C5', '222-222-2222', 2, 'apartment'), # Alex Kepekci, John Smith, Patrick Star, Jane Doe
(3, '300 Maple Road', 'Toronto', 'Ontario', 'M4B1B3', '333-333-3333', 4, 'condominium'), # Squidward Tentacles, Infected Dude
(4, '400 Oak Street', 'Calgary', 'Alberta', 'T2P5H5', '444-444-4444', 5, 'demidetached'), # Sandy Cheeks, Theo Von
(5, '500 Birch Lane', 'Halifax', 'Nova Scotia', 'B3H4R2', '555-555-5555', 3, 'house'), # Emily Smith
(6, '600 Street Avenue', 'Winnipeg', 'Manitoba', 'J0H5Z9', '666-666-666', 7, 'apartment'), # Gabriel D'Alesio, Leo Brodeur
(7, '700 King Crescent', 'Iqaluit', 'Nunavut', 'Z9Z5X5', '777-777-777', 2, 'condominium'); # Youssef Yacoub

INSERT INTO Person (SIN, MID, fname, lname, email, DOB, phone_number, citizenship, rid) 
VALUES
# employees
('123123123', 'KEPA12341234', 'Alex', 'Kepekci', 'alexkepekci@hotmail.com', '1999-09-24', '514-123-4321', 'Canadian', 2), # lives with John Smith, Patrick Star, Jane Doe
('111222333', 'SQUAS12345678', 'SpongeBob', 'SquarePants', 'spongebob@gmail.com', '1986-07-14', '555-099-1111', 'Bikini Bottom', 1), # lives solo
('444555666', 'STARP12345678', 'Patrick', 'Star', 'patrickstar@gmail.com', '1984-02-26', '555-502-2222', 'Bikini Bottom', 2), # lives with Alex Kepekci, John Smith, Jane Doe
('777888999', 'TENS12345678', 'Squidward', 'Tentacles', 'squidwardt@gmail.com', '1977-10-09', '555-259-3333', 'Bikini Bottom', 3), # lives with Infected Dude
('123456789', 'CHEES12345678', 'Sandy', 'Cheeks', 'sandycheeks@gmail.com', '1988-11-17', '555-125-4444', 'Bikini Bottom', 4), # lives with Theo Von
('987654321', 'DOEJ87654321', 'Jane', 'Doe', 'janedoe@gmail.com', '1990-08-24', '532-555-0102', 'Canadian', 2), # lives with Alex Kepekci, John Smith, Patrick Star
('234567890', 'SMIE23456789', 'Emily', 'Smith', 'emilysmith@gmail.com', '1982-12-16', '123-559-2342', 'British', 5), # lives solo
('100000000', 'DALG11111111', 'Gabriel', 'D''Alesio', 'galesi@encs.concordia.ca', '1996-08-12', '514-923-2932', 'Canadian', 6), # lives with Leo Brodeur
('200000000', 'BROL11111111', 'Leo', 'Brodeur', 'le_brode@live.concordia.ca', '1999-12-09', '514-223-2321', 'Canadian', 6), # lives with Gabriel D'Alesio
('300000000', 'YACY11111111', 'Youssef', 'Yacoub', 'y_yacoub@live.concordia.ca', '1995-04-24', '514-999-1234', 'Canadian', 7), # lives solo
# people who live with these employees
('000000000', 'SMIJ00000000', 'John', 'Smith', 'johnsmith@gmail.com', '1960-04-23', '514-000-0000', 'Canadian', 2),
('000000001', 'DUDR00000000', 'Infected', 'Dude', 'infecteddude@gmail.com', '1998-02-20', '514-111-1111', 'Canadian', 3),
('000000002', 'VONT00000000', 'Theo', 'Von', 'theovon@gmail.com', '1979-01-02', '954-013-4324', 'Canadian', 4);


INSERT INTO Employee (employee_sin) 
VALUES ('123123123'), ('111222333'),('444555666'),('777888999'),('123456789'),('987654321'),('234567890'),('100000000'),('200000000'),('300000000');

INSERT INTO Pharmacist (pharmacist_sin)
VALUES ('123123123'), ('100000000'); # Alex Kepekci, Gabriel D'Alesio

INSERT INTO Nurse (nurse_sin) 
VALUES ('123456789'); # Sandy Cheeks

INSERT INTO Doctor (doctor_sin)
VALUES ('987654321'), ('300000000'); # Jane Doe, Youssef Yacoub

INSERT INTO Receptionist (receptionist_sin)
VALUES ('111222333'); # Spongebob Squarepants

INSERT INTO Cashier (cashier_sin)
VALUES ('777888999'); # Squidward Tentacles

INSERT INTO Security (security_sin)
VALUES ('444555666'), ('200000000'); # Patrick Star, Leo Brodeur


INSERT INTO Administrative (administrative_sin)
VALUES 
('234567890'), # Emily Smith
('111222333'), # SpongeBob (also Receptionist)
('444555666'), # Patrick Star (also Security)
('777888999'), # Squidward (also Cashier)
('123456789'); # Sandy Cheeks (also Nurse)

INSERT INTO Facility (fid, name, address, city, province, postal_code, phone_number, web_address, facility_type, manager_sin, capacity) 
VALUES 
(1, 'CLSC', '101 Boul Maisonneuve', 'Montreal', 'Quebec', 'H2B5L9', '121-212-1212', 'www.clsc.com', 'clsc', '111222333', 100), # Managed by SpongeBob
(2, 'General Hospital', '202  Notre-Dame St', 'Montreal', 'Quebec', 'H3Z2Y7', '222-212-1212', 'www.generalhospital.com', 'hospital', '444555666', 1000), # Managed by Patrick Star
(3, 'Downtown Clinic', '303 Crescent St', 'Montreal', 'Quebec', 'H3C5L9', '323-212-1212', 'www.downtownclinic.com', 'clinic', '777888999', 300), # Managed by Squidward Tentacles
(4, 'Main Street Pharmacy', '404 Sherbrooke Ave', 'Montreal', 'Quebec', 'H4N5L8', '424-212-1212', 'www.mainstreetpharmacy.com', 'pharmacy', '123456789', 50), # Managed by Sandy Cheeks
(5, 'Special Health Center', '505 Union Ave', 'Montreal', 'Quebec', 'H5S6D9', '525-212-1212', 'www.specialhealthcenter.com', 'special', '234567890', 200); # Managed by Emily Smith

INSERT INTO Variant (variantType) 
VALUES 
('COVID-19'), 
('SARS-Cov-2'), 
('Alpha'), 
('Omicron');

INSERT INTO LivesWith (employee_sin, person_sin, relationship) 
VALUES 
-- Alex Kepekci
('123123123', '000000000', 'parent'), # lives with John Smith
('123123123', '444555666', 'roommate'), # lives with Patrick Star
('123123123', '987654321', 'partner'), # lives with Jane Doe
-- Patrick Star
('444555666', '123123123', 'roommate'), # lives with Alex Kepekci
('444555666', '000000000', 'roommate'), # lives with John Smith
('444555666', '987654321', 'roommate'), # lives with Jane Doe
-- Squidward Tentacles
('777888999', '000000001', 'dependent'), # lives with Infected Dude
-- Jane Doe
('987654321', '123123123', 'partner'), # lives with Alex Kepekci
('987654321', '000000000', 'roommate'), # lives with John Smith
('987654321', '444555666', 'roommate'), # lives with Patrick Star
-- Sandy Cheeks
('123456789', '000000002', 'partner'), # lives with Theo Von
-- Gabriel D'Alesio
('100000000', '200000000', 'roommate'), # lives with Leo Brodeur
-- Leo Brodeur
('200000000', '100000000', 'roommate'); # lives with Gabriel D'Alesio


INSERT INTO WorksAt (employee_sin, fid, start_date, end_date) 
VALUES 
('123123123', 1, '2021-01-01', NULL), # Alex Kepekci at CLSC
('111222333', 1, '2021-03-01', NULL), # SpongeBob SquarePants at CLSC (manager)
('444555666', 2, '2022-04-05', NULL), # Patrick Star at General Hospital (manager)
('777888999', 3, '2023-12-12', NULL), # Squidward Tentacles at Downtown Clinic (manager)
('123456789', 4, '2024-01-05', NULL), # Sandy Cheeks at Main Street Pharmacy (manager)
('300000000', 4, '2019-05-09', NULL), # Youssef Yacoub at Main Street Pharmacy
('234567890', 5, '2021-02-01', NULL), # Emily Smith at Special Health Center (manager)
('987654321', 5, '2019-05-21', '2023-08-27'), # Jane Doe at Special Health Center (not working anymore)
('100000000', 5, '2021-05-01', NULL), # Gabriel D'Alesio at Special Health Center
('200000000', 5, '2022-01-05', NULL); # Leo Brodeur at Special Health Center

INSERT INTO Vaccinated (person_sin, dose_number, vaccine_type, date, fid) 
VALUES 
('123123123', 2, 'Moderna', '2022-04-15', 1), # Alex Kepekci
('111222333', 3, 'Pfizer', '2022-09-11', 1), # Spongebob Squarepants
('444555666', 1, 'Pfizer', '2023-05-20', 2), # Patrick Star
('777888999', 1, 'AstraZeneca', '2022-06-25', 3), # Squidward Tentacles
('300000000', 2, 'AstraZeneca', '2023-01-01', 4), # Youssef Yacoub
('100000000', 2, 'Moderna', '2022-06-06', 5), # Gabriel D'Alesio
('000000002', 1, 'Johnson & Johnson', '2023-01-01', 5); # Theo Von

INSERT INTO Infected (person_sin, variantType, date) 
VALUES 
('123123123', 'SARS-Cov-2', '2022-07-01'), # Alex Kepekci
('123123123', 'COVID-19', '2022-12-05'), # Alex Kepekci
('123123123', 'Omicron', '2023-1-06'), # Alex Kepekci
('111222333', 'Omicron', '2023-01-01'), # Spongebob Squarepants
('444555666', 'COVID-19', '2022-08-15'), # Patrick Star
('777888999', 'Alpha', '2022-09-30'), # Squidward Tentacles
('777888999', 'COVID-19', '2022-10-30'), # Squidward Tentacles
('777888999', 'Omicron', '2022-11-30'), # Squidward Tentacles
('777888999', 'Omicron', '2023-01-30'), # Squidward Tentacles
('123456789', 'COVID-19', '2023-12-05'), # Sandy Cheeks
('000000001', 'Omicron', '2023-06-24'), # Infected Dude
('100000000', 'Alpha', '2023-01-20'), # Gabriel D'Alesio
('200000000', 'COVID-19', '2022-05-01'), # Leo Brodeur
('200000000', 'COVID-19', '2023-01-01'), # Leo Brodeur
('200000000', 'SARS-Cov-2', '2023-03-01'), # Leo Brodeur
('200000000', 'Alpha', '2023-05-01'); # Leo Brodeur

INSERT INTO Infected (person_sin, variantType, date) 
VALUES 
('987654321', 'COVID-19', '2023-01-23') # Jane Doe


QUERY 1

SELECT 
	Facility.province, 
	Facility.name, 
	Facility.capacity, 
	COUNT(DISTINCT WorksAt.employee_sin) AS TotalEmployeesAtFacility, 
    COUNT(LivesWith.person_sin) AS TotalLivingWithEmployees
FROM Facility 
LEFT JOIN WorksAt
	ON Facility.fid = WorksAt.fid AND WorksAt.end_date IS NULL
LEFT JOIN Liveswith
	ON WorksAt.employee_sin = LivesWith.employee_sin
GROUP BY Facility.fid;



QUERY 2

SELECT
    WorksAt.fid,
    WorksAt.employee_sin,
    SUM(CASE WHEN LivesWith.relationship = 'roommate' THEN 1 ELSE 0 END) AS NumOfRoommates,
    SUM(CASE WHEN LivesWith.relationship = 'dependent' THEN 1 ELSE 0 END) AS NumOfDependents,
    SUM(CASE WHEN LivesWith.relationship = 'parent' THEN 1 ELSE 0 END) AS NumOfParents,
    COUNT(LivesWith.person_sin) AS TotalLivingWithEmployee
FROM
    WorksAt
LEFT JOIN
	Facility ON WorksAt.fid = Facility.fid
LEFT JOIN
    LivesWith ON WorksAt.employee_sin = LivesWith.employee_sin
WHERE
	WorksAt.end_date IS NULL
GROUP BY
    WorksAt.fid, WorksAt.employee_sin
ORDER BY
	WorksAt.fid;



QUERY 3

SELECT fname, lname, COUNT(DISTINCT LivesWith.employee_sin), Residence.address, Residence.city, Residence.province FROM Person 
JOIN LivesWith ON Person.SIN = LivesWith.Person_sin
JOIN Employee ON LivesWith.employee_sin = Employee.employee_sin
JOIN WorksAt ON Employee.employee_sin = WorksAt.employee_sin
JOIN Residence ON Person.rid = Residence.rid
JOIN Infected ON Person.SIN = Infected.person_sin
WHERE WorksAt.fid = (SELECT fid FROM Facility WHERE name = 'Special Health Center') AND Infected.variantType = 'COVID-19'
GROUP BY Person.fname, Person.lname, Residence.address, Residence.city, Residence.province
ORDER BY Residence.province ASC, Residence.city ASC, Residence.address ASC;



QUERY 4

SELECT 
    Residence.province,
    COUNT(DISTINCT WorksAt.employee_sin) AS TotalWorkingEmployees,
    SUM(CASE WHEN Infected.person_sin IS NOT NULL THEN 1 ELSE 0 END) AS TotalInfectedWorkingEmployees
FROM 
    Employee
JOIN WorksAt
    ON Employee.employee_sin = WorksAt.employee_sin AND WorksAt.end_date IS NULL
JOIN Person
    ON Employee.employee_sin = Person.SIN
JOIN Residence
    ON Person.rid = Residence.rid
LEFT JOIN Infected
    ON Employee.employee_sin = Infected.person_sin
GROUP BY 
    Residence.province
ORDER BY 
    TotalInfectedWorkingEmployees ASC, Residence.province ASC;



QUERY 5

SELECT 
    Person.fname,
    Person.lname,
    CASE 
        WHEN Nurse.nurse_sin IS NOT NULL THEN 'nurse' 
        WHEN Doctor.doctor_sin IS NOT NULL THEN 'doctor' 
    END AS role,
    Person.MID,
    Person.SIN,
    Person.phone_number,
    Person.email,
    Infected.date,
    COUNT(DISTINCT LivesWith.person_sin) AS total_people_living_with_infected
FROM 
    WorksAt
INNER JOIN Person ON WorksAt.employee_sin = Person.SIN
LEFT JOIN Nurse ON WorksAt.employee_sin = Nurse.nurse_sin
LEFT JOIN Doctor ON WorksAt.employee_sin = Doctor.doctor_sin
LEFT JOIN LivesWith ON Person.SIN = LivesWith.employee_sin
LEFT JOIN Infected ON Person.SIN = Infected.person_sin
INNER JOIN Facility ON WorksAt.fid = Facility.fid
WHERE 
    Facility.name = 'Special Health Center'
    AND (Nurse.nurse_sin IS NOT NULL OR Doctor.doctor_sin IS NOT NULL)
    AND Infected.variantType = 'COVID-19'
GROUP BY 
    Person.SIN, Infected.date
ORDER BY 
    Infected.date DESC, Person.fname ASC, Person.lname ASC;



QUERY 6

    Person.lname AS 'Last Name', 
    CASE 
        WHEN Doctor.doctor_sin IS NOT NULL THEN 'Doctor'
        WHEN Nurse.nurse_sin IS NOT NULL THEN 'Nurse'
        WHEN Cashier.cashier_sin IS NOT NULL THEN 'Cashier'
        WHEN Pharmacist.pharmacist_sin IS NOT NULL THEN 'Pharmacist'
        WHEN Administrative.administrative_sin IS NOT NULL THEN 'Administrative'
        WHEN Receptionist.receptionist_sin IS NOT NULL THEN 'Receptionist'
        ELSE 'Other' 
    END AS 'Role',
    Person.MID AS 'Medicare Card Number', 
    Person.SIN AS 'Social Security Number', 
    Person.phone_number AS 'Telephone Number', 
    Person.email AS 'Email Address', 
    (SELECT COUNT(*) FROM LivesWith WHERE LivesWith.employee_sin = Employee.employee_sin) AS 'Total Living With Employee'
FROM 
    Employee 
JOIN Person ON Employee.employee_sin = Person.SIN
LEFT JOIN Doctor ON Employee.employee_sin = Doctor.doctor_sin
LEFT JOIN Nurse ON Employee.employee_sin = Nurse.nurse_sin
LEFT JOIN Cashier ON Employee.employee_sin = Cashier.cashier_sin
LEFT JOIN Pharmacist ON Employee.employee_sin = Pharmacist.pharmacist_sin
LEFT JOIN Administrative ON Employee.employee_sin = Administrative.administrative_sin
LEFT JOIN Receptionist ON Employee.employee_sin = Receptionist.receptionist_sin
LEFT JOIN WorksAt ON Employee.employee_sin = WorksAt.employee_sin AND WorksAt.end_date IS NULL
LEFT JOIN Facility ON WorksAt.fid = Facility.fid AND Facility.name = 'Special Health Clinic'
WHERE 
    NOT EXISTS (SELECT 1 FROM Vaccinated WHERE Vaccinated.person_sin = Person.SIN)
    AND NOT EXISTS (SELECT 1 FROM Infected WHERE Infected.person_sin = Person.SIN AND Infected.variantType = 'COVID-19')
ORDER BY 
    'Role' ASC, 
    Person.fname ASC, 
    Person.lname ASC;



QUERY 7

SELECT 
    Vaccinated.vaccine_type AS VaccineType,
    SUM(Vaccinated.dose_number) AS TotalNumberOfDoses
FROM Vaccinated
GROUP BY VaccineType
ORDER BY TotalNumberOfDoses DESC;



QUERY 8

SELECT
    Person.fname AS FirstName,
    Person.lname AS LastName,
    WorksAt.start_date AS StartDate,
    Facility.name AS FacilityName,
    CASE 
        WHEN Pharmacist.pharmacist_sin IS NOT NULL THEN 'Pharmacist'
        WHEN Nurse.nurse_sin IS NOT NULL THEN 'Nurse'
        WHEN Doctor.doctor_sin IS NOT NULL THEN 'Doctor'
        WHEN Receptionist.receptionist_sin IS NOT NULL THEN 'Receptionist'
        WHEN Cashier.cashier_sin IS NOT NULL THEN 'Cashier'
        WHEN Security.security_sin IS NOT NULL THEN 'Security'
        WHEN Administrative.administrative_sin IS NOT NULL THEN 'Administrative'
        END AS Role,
    Person.MID AS MedicareNumber,
    Person.SIN AS SocialSecurityNumber,
    Person.phone_number AS PhoneNumber,
    Person.email AS Email,
    COUNT(DISTINCT Infected.date) AS TotalNumberOfInfections,
    COUNT(DISTINCT LivesWith.person_sin) AS TotalLivingWithEmployees,
    Residence.residence_type AS ResidenceType,
    Residence.room_count AS TotalNumberOfBedrooms
FROM Person
JOIN WorksAt ON Person.SIN = WorksAt.employee_sin AND WorksAt.end_date IS NULL
JOIN Facility ON WorksAt.fid = Facility.fid
LEFT JOIN Pharmacist ON Person.SIN = Pharmacist.pharmacist_sin
LEFT JOIN Nurse ON Person.SIN = Nurse.nurse_sin
LEFT JOIN Doctor ON Person.SIN = Doctor.doctor_sin
LEFT JOIN Receptionist ON Person.SIN = Receptionist.receptionist_sin
LEFT JOIN Cashier ON Person.SIN = Cashier.cashier_sin
LEFT JOIN Security ON Person.SIN = Security.security_sin
LEFT JOIN Administrative ON Person.SIN = Administrative.administrative_sin
LEFT JOIN LivesWith ON Person.SIN = LivesWith.employee_sin
JOIN Residence ON Person.rid = Residence.rid
JOIN Infected ON Person.SIN = Infected.person_sin
GROUP BY Person.SIN, WorksAt.start_date, Facility.name
HAVING TotalNumberOfInfections >= 3
ORDER BY TotalNumberOfInfections ASC, FirstName ASC, LastName ASC;

